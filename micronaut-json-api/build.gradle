
plugins {
    // Apply the java-library plugin for API and implementation separation.
    id("java-library")
    id("io.micronaut.application") version "4.4.2"
    id("idea")
    id("maven-publish")
    id("org.jreleaser") version "1.15.0"
}

version = '1.0.1'
group = 'io.github.baylorpaul'

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    // Include micronaut-http-server for JsonApiErrorResponseProcessor.java
    implementation("io.micronaut:micronaut-http-server")
    implementation("io.micronaut.data:micronaut-data-model")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.validation:micronaut-validation")
    compileOnly("org.projectlombok:lombok")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    testCompileOnly("org.projectlombok:lombok")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    // generate a sources JAR for the library
    withSourcesJar()
    // generate a Javadoc JAR for the library
    withJavadocJar()
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.github.baylorpaul.micronautjsonapi.*")
    }
}

publishing {
    repositories {
        //mavenLocal()
        maven {
            /*
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
            */
            url = layout.buildDirectory.dir('staging-deploy')
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/baylorpaul/micronaut-json-api")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
        //    version = project.version
            from components.java

            pom {
                //name = "${project.group}:${project.name}"
                name = 'Micronaut JSON:API'
                description = 'A JSON:API library for Micronaut implementations'
                url = 'https://github.com/baylorpaul/micronaut-json-api'
                inceptionYear = '2024'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/baylorpaul/micronaut-json-api/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'baylorpaul'
                        name = 'Paul Poley'
                        //email = '141367555+baylorpaul@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/baylorpaul/micronaut-json-api.git'
                    developerConnection = 'scm:git:ssh://github.com:baylorpaul/micronaut-json-api.git'
                    url = 'https://github.com/baylorpaul/micronaut-json-api'
                }
            }
        }
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            // Portal Publisher API
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('target/staging-deploy')
                }
            }
        }
    }
}
